When you initialize a repository (with git init), a simple repository becames
a git repository. A hidden directory (.git) contains all the artifacts required
by git to keep track of commits, status, checkouts, branches, etc.
git status can be used to understand which files in the repository are under
version control. git log can be used to see the existing commits.

When we have decided the working directory to put our project files this
namespace is not related with git until we initialized it with git init. At the
time, the working directory becames a git repository. So, first difference is
that git did not know about a working directory until it becames a repository.
After we have a repository, files wont be under version control until we
add the files to it. To do that , files go through the git add command to get
into a staging area which is the previous step to became a commit group. The
advantage of having a staging area is to organize , or separate the files we
want to became a commit. Without that staging area the operation will be a
all or nothing operation.

We can use the staging area to make sure that logical changes can be clearly
identified in individual commits. Since moving a file to the staging area
means that you can compare that version (recently modified) with the last
commited version (with git diff --staged) it is very convenient to have a
staging area were 1) individual files or a group of files related with a recent
code change can be manage separated 2) code changes on those files could be
checked against last commit.

Branches are very helpful to experiment changes in the code without having to
go back and forward in the master branch. You have also the opportunity to
keep the history of the project in different levels of evolution. Additionally
new features or experimental features can be reviewed and tested.

Visualization of the branches helps a lot because their combination and
interrelation is a combination of lines and points in lines so a graph is very
useful in this case. An structure of lines and branches of different lines is
complicated to understand in a flat and sequential text.

The result of merging two branches together is that, by means of timestamps,
commits are interleaved for every file with commits in the repository. A new
labeled branch contains the combined commits.
